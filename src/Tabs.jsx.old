import { useState, useEffect, useRef } from "react";
import "./App.css";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  useNavigate,
  useLocation,
} from "react-router-dom";
import Container from "./components/Container";

function Tabs() {
  const [currentTab, setCurrentTab] = useState(0);
  const routes = [
    { path: "/todo", label: "ToDo" },
    { path: "/done", label: "Done" },
  ];
  /*
  const toggleTab = (index) => {
    console.log("index in toggleTab:" + index);
    setCurrentTab(index);
  };
  */

  const handleToggle = (index) => {
    console.log("new   index in toggleTab:" + index);
    setCurrentTab(index);
  };

  function findIndexByRoute(route) {
    let indexFound = 0;
    for (var i = 0; i < routes.length; i++) {
      if (routes[i].path === route) {
        indexFound = i;
        break;
      }
    }
    return indexFound;
  }

  const didMount = useRef(false);

  const location = useLocation();
  useEffect(() => {
    if (didMount.current) {
      console.log("I run if toggle changes.");
    } else {
      didMount.current = true;
      console.log("I run only at mount.");

      const initialIndex = findIndexByRoute(location.pathname);

      setCurrentTab(initialIndex);
    }
  }, [currentTab]);

  const Tab = ({ index, handleToggle }) => {
    //console.log("realIndex:" + realIndex);
    //console.log("route:" + location.pathname);

    //console.log("index param:" + index);
    let navigate = useNavigate();
    function handleClick() {
      handleToggle();
      navigate(routes[index].path);
    }

    return (
      <>
        <button
          className={currentTab === index ? "tabs active-tabs" : "tabs"}
          onClick={handleClick}
        >
          {routes[index].label}
        </button>
      </>
    );
  };

  return (
    <Router>
      <div className="container">
        <div className="bloc-tabs">
          <Tab index={0} handleToggle={handleToggle}></Tab>
          <Tab index={1} handleToggle={handleToggle}></Tab>
        </div>
        <Routes>
          <Route path="/todo" element={<Container checkView={false} />} />
          <Route path="/done" element={<Container checkView={true} />} />
          <Route path="*" element={<Container checkView={false} />} />
        </Routes>
      </div>
    </Router>
  );
}

export default Tabs;
